<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ObcidiaNetwork</name>
    </assembly>
    <members>
        <member name="T:ObcidiaNetwork.Base.Connection">
            <summary>
            A neural synapse
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Connection.InputNeuron">
            <summary>
            Input neuron reference.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Connection.OutputNeuron">
            <summary>
            Output neuron reference.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Connection.Weight">
            <summary>
            Weight of synapse.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Connection.WeightDelta">
            <summary>
            Weight delta of synapse.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.#ctor(ObcidiaNetwork.Base.Neuron,ObcidiaNetwork.Base.Neuron)">
            <summary>
            Creates new neuron connection.
            </summary>
            <param name="inputNeuron">From neuron.</param>
            <param name="outputNeuron">To neuron.</param>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.ToString">
            <summary>
            Overrriden ToString method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Base.Connection.ConnectionEqualityComparer">
            <summary>
            Equality comparer class.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.ConnectionEqualityComparer.Equals(ObcidiaNetwork.Base.Connection,ObcidiaNetwork.Base.Connection)">
            <summary>
            Overriden Equals method.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.ConnectionEqualityComparer.GetHashCode(ObcidiaNetwork.Base.Connection)">
            <summary>
            Overriden hash code method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:ObcidiaNetwork.Base.Connection.ConnectionComparer">
            <summary>
            Equality comparer instance.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.Equals(ObcidiaNetwork.Base.Connection)">
            <summary>
            New equality method for connections.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.Equals(System.Object)">
            <summary>
            Overriden equality method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.GetHashCode">
            <summary>
            Overriden get hash code method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.op_Equality(ObcidiaNetwork.Base.Connection,ObcidiaNetwork.Base.Connection)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Connection.op_Inequality(ObcidiaNetwork.Base.Connection,ObcidiaNetwork.Base.Connection)">
            <summary>
            Non-equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Base.Neuron">
            <summary>
            Main neuron class.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.InputConnections">
            <summary>
            Input connections.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.OutputConnections">
            <summary>
            Output connections.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.Bias">
            <summary>
            Bias value.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.BiasDelta">
            <summary>
            Bias delta value.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.Gradient">
            <summary>
            Gradient value.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.Value">
            <summary>
            Neuron main output value.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.#ctor(System.Collections.Generic.IEnumerable{ObcidiaNetwork.Base.Neuron})">
            <summary>
            Main contructor.
            </summary>
            <param name="inputNeurons">Input neurons to create connections.</param>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.CalculateValue">
            <summary>
            Calculate output value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.CalculateError(System.Double)">
            <summary>
            Calculate error.
            </summary>
            <param name="target">Target value.</param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.CalculateGradient(System.Nullable{System.Double})">
            <summary>
            Calculate gradient function value.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.UpdateWeights(System.Double,System.Double)">
            <summary>
            Update neuron connections weights.
            </summary>
            <param name="learnRate"></param>
            <param name="momentum"></param>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.ToString">
            <summary>
            Overriden ToString() method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Base.Neuron.NeuronEqualityComparer">
            <summary>
            Equality comparer class.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.NeuronEqualityComparer.Equals(ObcidiaNetwork.Base.Neuron,ObcidiaNetwork.Base.Neuron)">
            <summary>
            Overriden equals method.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.NeuronEqualityComparer.GetHashCode(ObcidiaNetwork.Base.Neuron)">
            <summary>
            Overriden get hash code method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:ObcidiaNetwork.Base.Neuron.NeuronComparer">
            <summary>
            Equality comparer instance.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.Equals(ObcidiaNetwork.Base.Neuron)">
            <summary>
            New equals method.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.Equals(System.Object)">
            <summary>
            Overriden equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.GetHashCode">
            <summary>
            Overriden get hash code method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.op_Equality(ObcidiaNetwork.Base.Neuron,ObcidiaNetwork.Base.Neuron)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Neuron.op_Inequality(ObcidiaNetwork.Base.Neuron,ObcidiaNetwork.Base.Neuron)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Base.Sigmoid">
            <summary>
            Represents styatic methods of sigmoid function
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Base.Sigmoid.Output(System.Double)">
            <summary>
            used to calculate output values.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Base.Sigmoid.Derivative(System.Double)">
            <summary>
            Used to calculate new weight values.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Controllers.NeuronsControllerBase">
            <summary>
            Main controller class.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Controllers.NeuronsControllerBase.LearnRate">
            <summary>
            Local learning rate.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Controllers.NeuronsControllerBase.Momentum">
            <summary>
            Local momentum value.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Controllers.NeuronsControllerBase.InputLayer">
            <summary>
            List of input neurons.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Controllers.NeuronsControllerBase.HiddenLayers">
            <summary>
            List of hidden layer neurons.
            </summary>
        </member>
        <member name="P:ObcidiaNetwork.Controllers.NeuronsControllerBase.OutputLayer">
            <summary>
            List of output neurons.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsControllerBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsControllerBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Main contructor.
            </summary>
            <param name="layersCount"></param>
            <param name="inputSize"></param>
            <param name="hiddenSize"></param>
            <param name="outputSize"></param>
            <param name="learnRate"></param>
            <param name="momentum"></param>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsControllerBase.CalculateError(System.Double[])">
            <summary>
            Calculates error.
            </summary>
            <param name="targets">Target values.</param>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.Controllers.NeuronsController">
            <summary>
            Neurons controller extention class.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Controller contructor.
            </summary>
            <param name="layersCount">Number of layer of computational neurons in the network.</param>
            <param name="inputSize">Number of input neurons.</param>
            <param name="hiddenSize">Number of hidden neurons.</param>
            <param name="outputSize">Number of output neurons.</param>
            <param name="learnRate">Learning rate (0.3 default)</param>
            <param name="momentum">Momentum (0.9 default)</param>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.ProcessTraining(System.Collections.Generic.KeyValuePair{System.Double[],System.Double[]}[],System.Int32)">
            <summary>
            Processes the training algorithm by propagations count.
            </summary>
            <param name="data">Training data.</param>
            <param name="propagationsCount">Number of propagations to loop.</param>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.ProcessTraining(System.Collections.Generic.KeyValuePair{System.Double[],System.Double[]}[],System.Double)">
            <summary>
            Processes the training algorithm by minimal error.
            </summary>
            <param name="data">Training data.</param>
            <param name="minimalErrorValue">value of minimal error.</param>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.PerformCalculations(System.Double[])">
            <summary>
            Performs calculations.
            </summary>
            <param name="inputs">Input values.</param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.ForwardPropagate(System.Double[])">
            <summary>
            Performs forward propagation.
            </summary>
            <param name="inputValues">Input values.</param>
        </member>
        <member name="M:ObcidiaNetwork.Controllers.NeuronsController.BackwardPropagate(System.Double[])">
            <summary>
            Performs backward propagation.
            </summary>
            <param name="trainingResults">Training result values.</param>
        </member>
        <member name="T:ObcidiaNetwork.Helpers.FixedRandom">
            <summary>
            Fixed Random class
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Helpers.FixedRandom.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Returns a fixed random integer between min and max values.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.Helpers.FixedRandom.RandomDouble">
            <summary>
            Returns a fixed random double ranged from -1 to 1.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ObcidiaNetwork.Helpers.NeuronsLayer.Neurons">
            <summary>
            Neurons container for this layer
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.Helpers.NeuronsLayer.#ctor(System.Int32,System.Collections.Generic.List{ObcidiaNetwork.Base.Neuron})">
            <summary>
            Constructor
            </summary>
            <param name="numberOfNeurons"></param>
            <param name="lastNeurons"></param>
        </member>
        <member name="T:ObcidiaNetwork.IO.NnExporter">
            <summary>
            Creates instance of exporter.
            </summary>
        </member>
        <member name="F:ObcidiaNetwork.IO.NnExporter._controller">
            <summary>
            Controller instance.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.IO.NnExporter.#ctor(ObcidiaNetwork.Controllers.NeuronsController)">
            <summary>
            Exporter contructor.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:ObcidiaNetwork.IO.NnExporter.Export(System.String)">
            <summary>
            Exports neural network to specific file.
            </summary>
            <param name="pathToFile"></param>
        </member>
        <member name="T:ObcidiaNetwork.IO.NnImporter">
            <summary>
            Creates local importer class.
            </summary>
        </member>
        <member name="F:ObcidiaNetwork.IO.NnImporter._controller">
            <summary>
            Controller instance.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.IO.NnImporter.#ctor(ObcidiaNetwork.Controllers.NeuronsController)">
            <summary>
            Importer constructor.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:ObcidiaNetwork.IO.NnImporter.Import(System.String)">
            <summary>
            Imports neural network from specific file.
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
        <member name="T:ObcidiaNetwork.NeuralNetwork">
            <summary>
            Obcidian Network main class. Creates a new neural network.
            </summary>
        </member>
        <member name="F:ObcidiaNetwork.NeuralNetwork._controller">
            <summary>
            Network controller that holds all network and methods.
            </summary>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new neural network object.
            </summary>
            <param name="layersCount">Number of hidden layers in network.</param>
            <param name="inputsCount">Number of input neurons.</param>
            <param name="computationalCount">Number of computational neurons and their biases.</param>
            <param name="outputsCount">Number of output neurons.</param>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.Calculate(System.Double[])">
            <summary>
            Computes the network values and writes results to output neurons.
            </summary>
            <param name="inputValues">Input values.</param>
            <returns></returns>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.Train(System.Collections.Generic.KeyValuePair{System.Double[],System.Double[]}[],System.Int32)">
            <summary>
            Performs training propagation. Firstly sets the input values and after calculates expected output and adjusts weights.
            </summary>
            <param name="trainingData">Data used for training consists of input values and expected output values.</param>
            <param name="cyclesCount">Number of times the network should process this data.</param>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.Train(System.Collections.Generic.KeyValuePair{System.Double[],System.Double[]}[],System.Double)">
            <summary>
            Performs training propagation. Firstly sets the input values and after calculates expected output and adjusts weights.
            </summary>
            <param name="trainingData">Data used for training consists of input values and expected output values.</param>
            <param name="minimalError">Value for minimal error.</param>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.ExportToFile(System.String)">
            <summary>
            Returns raw json string for export purposes.
            </summary>
            <param name="pathToFile">Path to file to wich it should be exported.</param>
        </member>
        <member name="M:ObcidiaNetwork.NeuralNetwork.ImportFromFile(System.String)">
            <summary>
            Loads this network from fole. Rewrites all current states and neurons with connections. Be careful using this method.
            </summary>
            <param name="pathToFile">Path to file wich to open</param>
        </member>
    </members>
</doc>
